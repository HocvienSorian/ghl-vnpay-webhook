// pages/api/vnpay-handler.js
import axios from 'axios';
import { verifyVnpResponse } from '../vnpay.js';

const GHL_WEBHOOK_URL = "https://backend.leadconnectorhq.com/payments/custom-provider/webhook";
const PRIVATE_PROVIDER_API_KEY = process.env.GHL_PRIVATE_PROVIDER_API_KEY;

async function sendPaymentCapturedWebhook({ chargeId, ghlTransactionId, amount, locationId }) {
  if (!PRIVATE_PROVIDER_API_KEY) {
    console.error("üö® PRIVATE_PROVIDER_API_KEY kh√¥ng t·ªìn t·∫°i. Check .env file!");
    throw new Error("PRIVATE_PROVIDER_API_KEY missing");
  }

  const payload = {
    event: "payment.captured",
    chargeId,
    ghlTransactionId,
    chargeSnapshot: {
      status: "succeeded",
      amount: amount || 0, // fallback n·∫øu amount undefined
      chargeId,
      chargedAt: Math.floor(Date.now() / 1000)
    },
    locationId,
    apiKey: PRIVATE_PROVIDER_API_KEY
  };

  console.log("üì¶ [Webhook] Payload g·ª≠i ƒë·∫øn GHL:");
  console.log(JSON.stringify(payload, null, 2));

  try {
    const res = await axios.post(GHL_WEBHOOK_URL, payload, {
      headers: {
        "Content-Type": "application/json"
      },
      timeout: 7000
    });

    console.log("‚úÖ [Webhook] G·ª≠i th√†nh c√¥ng:");
    console.log("Status:", res.status);
    console.log("Data:", JSON.stringify(res.data, null, 2));
    return res.data;
  } catch (err) {
    console.error("‚ùå [Webhook] L·ªói g·ª≠i ƒë·∫øn GHL:");
    console.error("Status:", err.response?.status);
    console.error("Data:", JSON.stringify(err.response?.data, null, 2));
    console.error("Headers:", JSON.stringify(err.response?.headers, null, 2));
    console.error("Config:", JSON.stringify(err.config, null, 2));
    throw err;
  }
}

export default async function handler(req, res) {
  console.log("üì• [Handler] GHL g·ªçi queryUrl");
  console.log("Method:", req.method);
  console.log("Headers:", JSON.stringify(req.headers, null, 2));
  console.log("Body:", JSON.stringify(req.body, null, 2));

  if (req.method !== 'POST') {
    console.warn("‚ö†Ô∏è [Handler] Method kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£:", req.method);
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  const { type, transactionId, chargeId, locationId, amount } = req.body;

  if (type !== 'verify' || !transactionId || !chargeId || !locationId) {
    console.error("‚ùå [Handler] Thi·∫øu tham s·ªë b·∫Øt bu·ªôc trong payload:");
    console.error(JSON.stringify(req.body, null, 2));
    return res.status(400).json({ error: 'Thi·∫øu tham s·ªë verify' });
  }

  try {
    // üìù B∆∞·ªõc 1: X√°c minh giao d·ªãch VNPAY (gi·∫£ l·∫≠p)
    console.log("üîç [Handler] ƒêang x√°c minh giao d·ªãch VNPAY...");
    const isValidPayment = true; // TODO: Thay b·∫±ng call QueryDR th·ª±c t·∫ø

    if (isValidPayment) {
      console.log("‚úÖ [Handler] Giao d·ªãch VNPAY h·ª£p l·ªá. ƒêang g·ª≠i webhook...");
      await sendPaymentCapturedWebhook({
        chargeId,
        ghlTransactionId: transactionId,
        amount,
        locationId
      });

      console.log("üì§ [Handler] Tr·∫£ success v·ªÅ GHL");
      return res.status(200).json({ success: true });
    } else {
      console.warn("‚ö†Ô∏è [Handler] Giao d·ªãch VNPAY kh√¥ng h·ª£p l·ªá. Tr·∫£ failed.");
      return res.status(200).json({ failed: true });
    }
  } catch (err) {
    console.error("üî• [Handler] L·ªói x·ª≠ l√Ω verify:");
    console.error(err.stack || err.message);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
}
