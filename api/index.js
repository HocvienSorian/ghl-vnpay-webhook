import { verifyVnpResponse } from '../vnpay.js';
import { createInvoiceInGHL, updateGHLContact, fetchLatestTransaction } from '../ghl.js';

export default async function handler(req, res) {
  if (!['GET', 'POST'].includes(req.method)) {
    return res.status(405).json({ error: 'Ch·ªâ h·ªó tr·ª£ GET ho·∫∑c POST' });
  }

  try {
    const { vnp_SecureHash, ...vnpParams } = req.query;
    console.log('üì• VNPAY Callback Params:', vnpParams);

    if (!vnp_SecureHash) {
      return res.status(400).json({ error: 'Thi·∫øu vnp_SecureHash' });
    }

    const isValid = verifyVnpResponse({ ...vnpParams, vnp_SecureHash });
    if (!isValid) {
      return res.status(400).json({ error: 'Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá' });
    }

    if (vnpParams.vnp_ResponseCode !== '00') {
      return res.status(200).json({ message: 'Giao d·ªãch th·∫•t b·∫°i t·ª´ VNPAY' });
    }

    const amount = parseInt(vnpParams.vnp_Amount, 10) / 100;
    const payDate = vnpParams.vnp_PayDate;
    const contactId = vnpParams.vnp_OrderInfo;

    if (!contactId) {
      console.error('‚ùå contactId kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i:', contactId);
      return res.status(400).json({ error: 'contactId kh√¥ng h·ª£p l·ªá, kh√¥ng th·ªÉ t·∫°o h√≥a ƒë∆°n' });
    }

    console.log('üßæ T·∫°o h√≥a ƒë∆°n cho contactId:', contactId);

    try {
      const invoiceRes = await createInvoiceInGHL({
        contactId,
        amount,
        description: `Thanh to√°n ƒë∆°n h√†ng #${vnpParams.vnp_TxnRef}`,
        payDate,
      });
      console.log('‚úÖ Invoice created:', invoiceRes);
    } catch (apiErr) {
      console.error('‚ùå GHL API tr·∫£ v·ªÅ l·ªói:', apiErr.response?.status, apiErr.response?.data);
      throw apiErr;
    }

    console.log('üè∑Ô∏è Th√™m tag cho contact');
    await updateGHLContact(contactId, {
      tags: ['ƒê√£ thanh to√°n VNPAY'],
    });

    return res.status(200).json({ message: '‚úÖ X·ª≠ l√Ω IPN th√†nh c√¥ng v√† ƒë√£ c·∫≠p nh·∫≠t GHL' });
  } catch (err) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω webhook:', err);
    const statusCode = err.response?.status || 500;
    const message = err.response?.data?.message || err.message;
    return res.status(statusCode).json({ error: 'L·ªói x·ª≠ l√Ω webhook', details: message });
  }
}
