// index.js

import crypto from 'crypto';
import qs from 'qs';

const VNP_HASHSECRET = process.env.VNP_HASHSECRET;

function sortObject(obj) {
  const sorted = {};
  const keys = Object.keys(obj).sort();
  for (let key of keys) {
    sorted[key] = obj[key];
  }
  return sorted;
}

function verifyVnpResponse(rawParams) {
  const params = { ...rawParams };
  const secureHash = params['vnp_SecureHash'];

  // ‚ùóÔ∏èX√≥a 2 tr∆∞·ªùng kh√¥ng ƒë∆∞·ª£c t√≠nh trong ch·ªØ k√Ω
  delete params['vnp_SecureHash'];
  delete params['vnp_SecureHashType'];

  const sortedParams = sortObject(params);
  const signData = qs.stringify(sortedParams, { encode: false });

  const hmac = crypto.createHmac('sha512', VNP_HASHSECRET);
  const calculatedHash = hmac.update(Buffer.from(signData, 'utf-8')).digest('hex');

  console.log('‚úÖ So s√°nh SecureHash:');
  console.log('‚Üí T·ª´ VNPAY:', secureHash);
  console.log('‚Üí T√≠nh l·∫°i:', calculatedHash);
  console.log('üßæ signData:', signData);

  return secureHash === calculatedHash;
}

export default async function handler(req, res) {
  if (!['GET', 'POST'].includes(req.method)) {
    return res.status(405).json({ error: 'Ch·ªâ h·ªó tr·ª£ GET ho·∫∑c POST' });
  }

  try {
    const { vnp_SecureHash, vnp_SecureHashType, ...vnpParams } = req.query;

    console.log('üì• Tham s·ªë nh·∫≠n t·ª´ VNPAY:', req.query);

    if (!vnp_SecureHash) {
      return res.status(400).json({ error: 'Thi·∫øu vnp_SecureHash' });
    }

    const isValid = verifyVnpResponse(req.query);

    if (!isValid) {
      return res.status(400).json({ error: 'Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá (sai SecureHash)' });
    }

    const {
      vnp_TxnRef,
      vnp_Amount,
      vnp_OrderInfo,
      vnp_ResponseCode,
      vnp_PayDate,
      vnp_TransactionNo,
    } = vnpParams;

    // ‚úÖ Chuy·ªÉn s·ªë ti·ªÅn v·ªÅ ƒë∆°n v·ªã VND
    const amount = parseInt(vnp_Amount, 10) / 100;

    if (vnp_ResponseCode !== '00') {
      console.warn(`‚ùå Giao d·ªãch th·∫•t b·∫°i (M√£ l·ªói: ${vnp_ResponseCode})`);
      return res.status(200).json({ message: 'Giao d·ªãch th·∫•t b·∫°i t·ª´ ph√≠a VNPAY' });
    }

    // üßæ T·∫°i ƒë√¢y b·∫°n c√≥ th·ªÉ x·ª≠ l√Ω l∆∞u tr·∫°ng th√°i v√†o DB, t·∫°o invoice, c·∫≠p nh·∫≠t contact...

    console.log('üéâ Giao d·ªãch th√†nh c√¥ng!');
    console.log('‚Üí M√£ ƒë∆°n h√†ng:', vnp_TxnRef);
    console.log('‚Üí M√£ giao d·ªãch VNPAY:', vnp_TransactionNo);
    console.log('‚Üí S·ªë ti·ªÅn:', amount);
    console.log('‚Üí M√¥ t·∫£:', vnp_OrderInfo);
    console.log('‚Üí Th·ªùi gian:', vnp_PayDate);

    // ‚úÖ Tr·∫£ ph·∫£n h·ªìi cho VNPAY n·∫øu ƒë√¢y l√† IPN (server-to-server)
    if (req.url.includes('/vnpay_ipn')) {
      return res.status(200).json({ RspCode: '00', Message: 'Success' });
    }

    // ‚úÖ Tr·∫£ th√¥ng b√°o cho kh√°ch (n·∫øu l√† Return URL)
    return res.status(200).json({ message: 'Giao d·ªãch th√†nh c√¥ng', orderId: vnp_TxnRef, amount });
  } catch (error) {
    console.error('üî• L·ªói x·ª≠ l√Ω webhook:', {
      message: error.message,
      stack: error.stack,
    });
    return res.status(500).json({ error: 'L·ªói x·ª≠ l√Ω webhook' });
  }
}
