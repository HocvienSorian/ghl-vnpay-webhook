import { generatePaymentUrl } from '../vnpay.js';

// üü¢ Extract invoiceId t·ª´ paymentLink
function extractInvoiceIdFromUrl(url) {
  const match = url.match(/invoice\/([a-f0-9]{24})/);
  return match ? match[1] : null;
}

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Ch·ªâ h·ªó tr·ª£ ph∆∞∆°ng th·ª©c POST' });
  }

  const { amount, paymentLink, ipAddr } = req.body;

  if (!amount || !paymentLink || !ipAddr) {
    console.warn('‚ö† Thi·∫øu tham s·ªë:', { amount, paymentLink, ipAddr });
    return res.status(400).json({ error: 'Thi·∫øu amount, paymentLink ho·∫∑c ipAddr' });
  }

  try {
    const requiredEnvs = ['VNP_HASHSECRET', 'VNP_TMNCODE', 'VNP_URL', 'VNP_RETURNURL'];
    const missing = requiredEnvs.filter((key) => !process.env[key]);
    if (missing.length > 0) {
      console.error('‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng VNPAY:', missing);
      return res.status(500).json({ error: 'Thi·∫øu c·∫•u h√¨nh m√¥i tr∆∞·ªùng VNPAY', missing });
    }

    const invoiceId = extractInvoiceIdFromUrl(paymentLink);
    if (!invoiceId) {
      console.error('‚ùå Kh√¥ng t√¨m th·∫•y invoiceId trong paymentLink:', paymentLink);
      return res.status(500).json({ error: 'Kh√¥ng t√¨m th·∫•y invoiceId trong paymentLink' });
    }

    console.log('üì¶ Extracted invoiceId =', invoiceId);

    const paymentUrl = generatePaymentUrl({
      amount,
      orderInfo: invoiceId,
      ipAddr
    });

    console.log('‚úÖ Generated paymentUrl:', paymentUrl);

    return res.status(200).json({ paymentUrl });
  } catch (err) {
    console.error('üî• L·ªói khi t·∫°o paymentUrl:', err.message);
    return res.status(500).json({
      error: 'L·ªói t·∫°o paymentUrl',
      detail: err.message
    });
  }
}
